// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	dto "github.com/alterra-dataon-kelompok-1/order-service/internal/dto"
	model "github.com/alterra-dataon-kelompok-1/order-service/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, order model.Order) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, order)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, order)
}

// DeleteOrderByID mocks base method.
func (m *MockRepository) DeleteOrderByID(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderByID indicates an expected call of DeleteOrderByID.
func (mr *MockRepositoryMockRecorder) DeleteOrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderByID", reflect.TypeOf((*MockRepository)(nil).DeleteOrderByID), ctx, id)
}

// GetOrderByID mocks base method.
func (m *MockRepository) GetOrderByID(ctx context.Context, id uuid.UUID) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", ctx, id)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockRepositoryMockRecorder) GetOrderByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockRepository)(nil).GetOrderByID), ctx, id)
}

// GetOrders mocks base method.
func (m *MockRepository) GetOrders(ctx context.Context, payload *dto.GetRequest) (*[]model.Order, *dto.PaginationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, payload)
	ret0, _ := ret[0].(*[]model.Order)
	ret1, _ := ret[1].(*dto.PaginationInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockRepositoryMockRecorder) GetOrders(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockRepository)(nil).GetOrders), ctx, payload)
}

// UpdateOrderByIDWithDTO mocks base method.
func (m *MockRepository) UpdateOrderByIDWithDTO(ctx context.Context, id uuid.UUID, data *dto.UpdateOrderRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderByIDWithDTO", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderByIDWithDTO indicates an expected call of UpdateOrderByIDWithDTO.
func (mr *MockRepositoryMockRecorder) UpdateOrderByIDWithDTO(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderByIDWithDTO", reflect.TypeOf((*MockRepository)(nil).UpdateOrderByIDWithDTO), ctx, id, data)
}

// UpdateOrderByIDWithModel mocks base method.
func (m *MockRepository) UpdateOrderByIDWithModel(ctx context.Context, id uuid.UUID, data *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderByIDWithModel", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderByIDWithModel indicates an expected call of UpdateOrderByIDWithModel.
func (mr *MockRepositoryMockRecorder) UpdateOrderByIDWithModel(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderByIDWithModel", reflect.TypeOf((*MockRepository)(nil).UpdateOrderByIDWithModel), ctx, id, data)
}

// UpdateOrderItemByID mocks base method.
func (m *MockRepository) UpdateOrderItemByID(ctx context.Context, orderID uuid.UUID, data *model.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItemByID", ctx, orderID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderItemByID indicates an expected call of UpdateOrderItemByID.
func (mr *MockRepositoryMockRecorder) UpdateOrderItemByID(ctx, orderID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItemByID", reflect.TypeOf((*MockRepository)(nil).UpdateOrderItemByID), ctx, orderID, data)
}
